Initialise the 4 key files with 256-bit keys.
Set up params.py with the files and columns to be SELECTed or JOINed on.
client.py should have access to helper.py and params.py
server.py should have access to helper.py
adversary.py should have access to the HOST variable in helper.py
Replace HOST in helper.py with the public ip address of the server.
Run server.py (on a third-party server or locally).
(Run adversary.py locally or on the server, or on any device that can listen to the communication between client.py and server.py)
Run client.py.

frequency_analysis_ws.py and graph_matching_ws.py are sample codes for running the actual LAAs.
With ciph_freq and join_frequencies generated by adversary.py, all other attacks can be run similarly.
Score calculation is computed with select_pt and join_pt generated by client.py upon initialisation.
Usage:
    After making some queries via client.py and adversary.py generates the files ciph_freq and join_frequencies,
    python3 frequency_analysis_ws.py ciph_freq <file to auxiliary table> <name of column of auxiliary data in the table>
    python3 graph_matching_ws.py join_frequencies <file to probability distribution of column 0> <file to probability distribution of column 1> <percentage error to introduce in auxiliary data generation>


Demo 1, Single Column Complete, frequency analysis through wireshark:
    Change case in params.py to 0
    Run: sudo python3 server.py
    Run: sudo python3 adversary.py
    Run: python3 client.py
    After initialisation is complete, input "rng s" into client.py
    adversary.py captures all messages and generates ciph_freq
    Run: python3 frequency_analysis_ws.py ciph_freq col1.csv col1

Demo 2, Double Column Complete, graph matching through wireshark:
    Change case in params.py to 1
    Run: sudo python3 server.py
    Run: sudo python3 adversary.py
    Run: python3 client.py
    After initialisation is complete, input "rng j" into client.py (takes a few minutes due to large amounts of data being sent)
    adversary.py captures all messages and generates join_frequencies
    Run: python3 graph_matching_ws.py join_frequencies col0_dist.csv col1_dist.csv 10
